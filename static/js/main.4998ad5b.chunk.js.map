{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","height","setHeight","weight","setWeight","heightErr","setHeightErr","weightErr","setWeightErr","bmiValue","setBmiValue","bmiText","setBmiText","chonkVisibility","setChonkVisibility","text","setText","resultChonk","setResultChonk","AllChonkImg","handleKeyPress","source","event","currentChar","key","found","i","length","currentValue","parseInt","preventDefault","calcBmi","heightErrStr","weightErrStr","validate","result","bmi","toFixed","chonks","resultString","randChonk","Math","floor","random","id","className","type","name","step","placeholder","min","max","value","onChange","target","onKeyPress","bind","onClick","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4998ad5b.chunk.js","sourcesContent":["    import React, {useState} from 'react'\n    import './App.css'\n    import Slider from 'react-rangeslider'\n    import 'react-rangeslider/lib/index.css'\n\n\n     const App = () =>  {\n      let [height, setHeight] = useState(\"\")\n      let [weight, setWeight] = useState(\"\")\n      let [heightErr, setHeightErr] = useState(\"\")\n      let [weightErr, setWeightErr] = useState(\"\")\n      let [bmiValue, setBmiValue] = useState(\"\")\n      let [bmiText, setBmiText] = useState(\"\")\n      let [chonkVisibility, setChonkVisibility] = useState(\"invisibleChonk\")\n      let [text, setText] = useState(\"\")\n      let [resultChonk, setResultChonk] = useState(\"visibleChonk\")\n      let AllChonkImg = {\n        slimChonk: [\"./images/slim/1.jpg\", \"./images/slim/2.jpg\", \"./images/slim/3.jpg\", \"./images/slim/4.jpg\"],\n          normalChonk: [\"./images/normal/1.jpg\", \"./images/normal/2.jpg\", \"./images/normal/3.jpg\", \"./images/normal/4.jpg\", \"./images/normal/5.jpg\"],\n          fatChonk: [\"./images/fat/1.jpg\", \"./images/fat/2.jpg\", \"./images/fat/3.jpg\", \"./images/fat/4.jpg\"],\n          tooFatChonk: [\"./images/2fat/1.jpg\", \"./images/2fat/2.jpg\", \"./images/2fat/3.jpg\", \"./images/2fat/4.jpg\", \"./images/2fat/5.jpg\", \"./images/2fat/6.jpg\"]\n      }\n\n      const minHeight = 95\n      const maxHeight = 220\n      const minWeight = 10\n      const maxWeight = 300\n      const slimThre = 18.5\n      const normalThre = 24.9\n      const fatThre = 29.9\n\n      const handleHeightChange = event => { //spinner\n        setHeight(event.target.value)\n      }\n\n      const handleWeightChange = event => { //spinner\n        setWeight(event.target.value)\n      }\n\n      const handleHeightSliderChange = value => { //range\n        setHeight(value)\n      }\n\n      const handleWeightSliderChange = value => { //range\n        setWeight(value)\n      }\n      \n\n      //limiting input to numbers\n      const handleKeyPress = (source, event) => {\n        let allowedChars = \".0123456789\"\n        let currentChar = event.key\n        let found = false\n        for (let i = 0;  i < allowedChars.length; i++) {\n          if (currentChar === allowedChars[i]) {\n            found = true\n          }\n        }\n        if(found === false) {\n          event.preventDefault()\n          return\n        }\n\n      //limiting number input in height/weight\n      let currentValue = \"\"   \n            if (source === 'height') {\n              currentValue = parseInt(height + currentChar)\n              if (currentValue > maxHeight) {\n                event.preventDefault()\n              } \n            } else {\n              currentValue = parseInt(weight + currentChar)\n              if (currentValue > maxWeight) {\n                event.preventDefault()\n              }\n            }\n\n            if(currentValue === 0) {\n                event.preventDefault()\n            }\n      }\n\n\n      //classifying the results w/images, calculating BMI\n      const classifyResult = result => {\n        if (result < slimThre) {\n              return \"slim\"\n        }\n        if (result <= normalThre) {\n          return \"normal\"\n        }\n        if (result <= fatThre) {\n          return \"fat\"\n        }\n        return \"tooFat\"\n      }\n\n      //height, weight validation and min/max manual input nrs \n      const validate = () => {\n        setHeightErr(\"\")\n        setWeightErr(\"\")\n\n        let heightErrStr = \"\"\n        let weightErrStr = \"\"\n\n        //error messageges for H/W\n        if(!height) {\n          heightErrStr = \"Please, enter height\"\n        } else if(height < minHeight) {\n          heightErrStr = \"Greater than 95, please\"\n        } else if(height > maxHeight) {\n          heightErrStr = \"Less than 220, please\"\n        }\n          \n        if(!weight) {\n          weightErrStr = \"Please, enter weight\"\n        } else if(weight < minWeight) {\n           weightErrStr = \"Greater than 10, please\"\n        } else if(weight > maxWeight) {\n           weightErrStr = \"Less than 300, please\"\n        }\n      \n       if(heightErrStr || weightErrStr) { \n          setHeightErr(heightErrStr)\n          setWeightErr(weightErrStr)\n          return false \n        }\n        return true \n      }\n\n      //calc BMI\n      const calcBmi = event => {\n        if(!validate()) {\n          return \n        }\n\n        let bmi = (weight / (height/100 * height/100)).toFixed(1)\n        let chonks = null\n        let resultString = \"\"\n\n\n        switch (classifyResult(bmi)) {\n          case \"slim\": {\n            chonks = AllChonkImg.slimChonk\n            resultString = \"You're pretty slonky, have a KitKat!\"\n            break\n          }\n          case \"normal\": {\n            chonks = AllChonkImg.normalChonk\n            resultString = \"You're okay...for now.\"\n            break\n          }\n          case \"fat\": {\n            chonks = AllChonkImg.fatChonk\n            resultString = \"You're getting kind of fat...\"\n            break\n          }\n          case \"tooFat\": {\n            chonks = AllChonkImg.tooFatChonk\n            resultString = \"You're quite the chonker, there!\"\n            break\n          }\n          default:{}\n        }\n\n        //getting random images & avoiding duplicates\n        let randNum = Math.floor(Math.random() * chonks.length)\n        let randChonk = chonks[randNum]\n\n\n        if(resultChonk === randChonk) {\n            calcBmi(event)\n            return\n        }\n\n        setResultChonk(randChonk)\n        setChonkVisibility(\"visibleChonk\")  \n        setBmiText(resultString)\n        setBmiValue(bmi) \n        setText(\"invisibleChonk\")\n      }\n\n\n      //clear button\n      const clear = event => {\n        event.preventDefault()\n        setHeight(\"\")\n        setWeight(\"\")\n        setBmiValue(\"\")\n        setChonkVisibility(\"invisibleChonk\")\n        setHeightErr(\"\") \n        setWeightErr(\"\")\n        setText(\"visibleChonk\")\n      }\n\n      return ( \n        <div id=\"container\"> \n          <div id=\"title\">\n            <h1>Calculate Your Body Mass Index</h1>\n          </div>\n            <form>\n              <div className=\"unit\">\n                <p>Height (95cm-220cm)</p>\n              </div>\n                <input \n                  type=\"number\" \n                  name=\"height\" \n                  step=\"1\" \n                  placeholder=\"cm\"\n                  min={minHeight} \n                  max={maxHeight} \n                  value={height}\n                  onChange={handleHeightChange}\n                  onKeyPress={handleKeyPress.bind(this, 'height')}\n                />\n               \n                <div className=\"error\">{heightErr}</div>\n               \n\n               <div className=\"slider\">\n                <Slider \n                    min={minHeight} \n                    max={maxHeight} \n                    step={1} \n                    value={height} \n                    onChange={handleHeightSliderChange}\n                /> \n               </div>\n\n                <br />\n              \n                <div className=\"unit\">\n                  <p>Weight (10kg-300kg)</p>\n                </div>\n                  <input \n                    type=\"number\" \n                    name=\"weight\" \n                    step=\"0.5\" \n                    placeholder=\"kg\" \n                    min={minWeight} \n                    max={maxWeight} \n                    value={weight} \n                    onChange={handleWeightChange}\n                    onKeyPress={handleKeyPress.bind(this, 'weight')}\n                 />\n\n                 <div className=\"error\">{weightErr}</div>\n\n                <div className=\"slider\">\n                 <Slider\n                    min={minWeight} \n                    max={maxWeight} \n                    step={0.5} \n                    value={weight} \n                    onChange={handleWeightSliderChange}\n                  />\n                 </div>\n               \n                <br />\n        \n                <div id=\"buttons-container\">\n                  <button \n                    className=\"button\" \n                    onClick={event => {\n                      event.preventDefault()\n                      calcBmi()\n                    }}\n                    >Calculate\n                  </button>\n                  \n                <br />\n\n                  <button \n                    className=\"button\" \n                    onClick={clear}\n                    >Clear\n                  </button>\n                </div>\n\n                <br />\n\n            </form>\n\n            <div className={chonkVisibility}>\n              <div id=\"image\">\n                <img src={resultChonk} alt=\"pictures of cats\" />\n              </div>\n              <div id=\"result-top-text\">\n                <p>Your current BMI: {bmiValue} </p>\n              </div>\n              <div id=\"bmi-text\">{bmiText}</div>\n            </div>\n\n              <div className={text}>\n                <div id=\"text\">\n                  Body mass index, abbreviated BMI, is a key index for relating weight to height. \n                  <br />\n                  <br />\n                  BMI is a person's weight in kilograms (kg) divided by his or her height in meters squared.\n                  The National Institutes of Health (NIH) now defines normal weight, overweight, and obesity according to \n                  BMI rather than the traditional height/weight charts.\n                  <ul>\n                    <li>Overweight is a BMI of 25–29.9</li>\n                    <li>Obesity is a BMI of 30 or more</li>\n                  </ul>\n                  A very muscular person might have a high BMI without health risks.\n                </div>\n              </div>\n        </div> //container\n      ) \n    }\n\n   \nexport default App\n\n\n\n\n     \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}